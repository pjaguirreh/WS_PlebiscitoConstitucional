#linetype = 2,
alpha= 0.5
) +
geom_point(alpha = 0.8, col = "light grey") +
#geom_point(size = 2, alpha = 0.8, col = "light grey") +
#geom_point(data = filter(a, destacar == "1"), size = 2, color = "red") +
ylim(c(5, 95)) +
xlim(c(5, 95)) +
mi_tema +
labs(title = "Resultados parciales plebiscito nacional propuesta constitucional",
subtitle = glue('En rojo se destacan las 10 comunas con mayor población en Chile. Actualizado a las {str_sub(Sys.time(), 12,16)}'),
x = "Votación (%) Boric en 2da Vuelta",
y = "Votación (%) Apruebo 04/05",
caption = "Elaborado por Pablo Aguirre Hörmann (@PAguirreH - https://github.com/pjaguirreh)") +
annotate("text", x = 19, y = 95,
label = c("Comunas a este lado de la curva están votando en mayor medida\npor el Apruebo al comparar con su votación por Boric"),
size = 3) +
annotate("text", x = 81, y = 5,
label = c("Comunas a este lado de la curva están votando en menor medida\npor el Apruebo al comparar con su votación por Boric"),
size = 3) +
theme(legend.position = "none",
plot.caption = element_text(color = "grey70", size = 13))
a %>%
left_join(votos_validos_com) %>%
ggplot(aes(x = Boric, y = Apruebo, col = votos_validos)) +
geom_vline(xintercept = 50, color = "blue",
size = 1.5,
alpha= 0.5) +
geom_hline(yintercept = 50, color = "blue",
size = 1.5,
alpha= 0.5) +
geom_point(alpha = 0.8, col = "light grey") +
#geom_point(size = 2, alpha = 0.8, col = "light grey") +
#geom_point(data = filter(a, destacar == "1"), size = 2, color = "red") +
ylim(c(5, 95)) +
xlim(c(5, 95)) +
mi_tema +
labs(title = "Resultados parciales plebiscito nacional propuesta constitucional",
subtitle = glue('En rojo se destacan las 10 comunas con mayor población en Chile. Actualizado a las {str_sub(Sys.time(), 12,16)}'),
x = "Votación (%) Boric en 2da Vuelta",
y = "Votación (%) Apruebo 04/05",
caption = "Elaborado por Pablo Aguirre Hörmann (@PAguirreH - https://github.com/pjaguirreh)") +
annotate("text", x = 19, y = 95,
label = c("Comunas donde ganó Kast y va ganando Apruebo"),
size = 3) +
annotate("text", x = 81, y = 5,
label = c("Comunas donde ganó Boric y va ganando Rechazo"),
size = 3) +
annotate("text", x = 19, y = 5,
label = c("Comunas donde ganó Kast y va ganando Rechazo"),
size = 3) +
annotate("text", x = 81, y = 95,
label = c("Comunas donde ganó Boric y va ganando Apruebo"),
size = 3)  +
theme(legend.position = "none",
plot.caption = element_text(color = "grey70", size = 13))
a %>%
left_join(votos_validos_com) %>%
ggplot(aes(x = Boric, y = Apruebo, size = votos_validos)) +
geom_vline(xintercept = 50, color = "blue",
size = 1.5,
alpha= 0.5) +
geom_hline(yintercept = 50, color = "blue",
size = 1.5,
alpha= 0.5) +
geom_point(alpha = 0.8, col = "light grey") +
#geom_point(size = 2, alpha = 0.8, col = "light grey") +
#geom_point(data = filter(a, destacar == "1"), size = 2, color = "red") +
ylim(c(5, 95)) +
xlim(c(5, 95)) +
mi_tema +
labs(title = "Resultados parciales plebiscito nacional propuesta constitucional",
subtitle = glue('En rojo se destacan las 10 comunas con mayor población en Chile. Actualizado a las {str_sub(Sys.time(), 12,16)}'),
x = "Votación (%) Boric en 2da Vuelta",
y = "Votación (%) Apruebo 04/05",
caption = "Elaborado por Pablo Aguirre Hörmann (@PAguirreH - https://github.com/pjaguirreh)") +
annotate("text", x = 19, y = 95,
label = c("Comunas donde ganó Kast y va ganando Apruebo"),
size = 3) +
annotate("text", x = 81, y = 5,
label = c("Comunas donde ganó Boric y va ganando Rechazo"),
size = 3) +
annotate("text", x = 19, y = 5,
label = c("Comunas donde ganó Kast y va ganando Rechazo"),
size = 3) +
annotate("text", x = 81, y = 95,
label = c("Comunas donde ganó Boric y va ganando Apruebo"),
size = 3)  +
theme(legend.position = "none",
plot.caption = element_text(color = "grey70", size = 13))
a %>%
left_join(votos_validos_com) %>%
ggplot(aes(x = Boric, y = Apruebo, size = votos_validos)) +
geom_abline(intercept = 0, slope = 1, color = "blue",
size = 1.5,
#linetype = 2,
alpha= 0.5
) +
geom_point(alpha = 0.8, col = "light grey") +
#geom_point(size = 2, alpha = 0.8, col = "light grey") +
#geom_point(data = filter(a, destacar == "1"), size = 2, color = "red") +
ylim(c(5, 95)) +
xlim(c(5, 95)) +
mi_tema +
labs(title = "Resultados parciales plebiscito nacional propuesta constitucional",
subtitle = glue('En rojo se destacan las 10 comunas con mayor población en Chile. Actualizado a las {str_sub(Sys.time(), 12,16)}'),
x = "Votación (%) Boric en 2da Vuelta",
y = "Votación (%) Apruebo 04/05",
caption = "Elaborado por Pablo Aguirre Hörmann (@PAguirreH - https://github.com/pjaguirreh)") +
annotate("text", x = 19, y = 95,
label = c("Comunas a este lado de la curva están votando en mayor medida\npor el Apruebo al comparar con su votación por Boric"),
size = 3) +
annotate("text", x = 81, y = 5,
label = c("Comunas a este lado de la curva están votando en menor medida\npor el Apruebo al comparar con su votación por Boric"),
size = 3) +
theme(legend.position = "none",
plot.caption = element_text(color = "grey70", size = 13))
a %>%
left_join(votos_validos_com) %>%
ggplot(aes(x = Boric, y = Apruebo, size = votos_validos)) +
geom_vline(xintercept = 50, color = "blue",
size = 1.5,
alpha= 0.5) +
geom_hline(yintercept = 50, color = "blue",
size = 1.5,
alpha= 0.5) +
geom_point(alpha = 0.8, col = "light grey") +
#geom_point(size = 2, alpha = 0.8, col = "light grey") +
#geom_point(data = filter(a, destacar == "1"), size = 2, color = "red") +
ylim(c(5, 95)) +
xlim(c(5, 95)) +
mi_tema +
labs(title = "Resultados parciales plebiscito nacional propuesta constitucional",
subtitle = glue('El tamaño de los puntos refleja el N° de votos válidamente emitidos. Actualizado a las {str_sub(Sys.time(), 12,16)}'),
x = "Votación (%) Boric en 2da Vuelta",
y = "Votación (%) Apruebo 04/05",
caption = "Elaborado por Pablo Aguirre Hörmann (@PAguirreH - https://github.com/pjaguirreh)") +
annotate("text", x = 19, y = 95,
label = c("Comunas donde ganó Kast y va ganando Apruebo"),
size = 3) +
annotate("text", x = 81, y = 5,
label = c("Comunas donde ganó Boric y va ganando Rechazo"),
size = 3) +
annotate("text", x = 19, y = 5,
label = c("Comunas donde ganó Kast y va ganando Rechazo"),
size = 3) +
annotate("text", x = 81, y = 95,
label = c("Comunas donde ganó Boric y va ganando Apruebo"),
size = 3)  +
theme(legend.position = "none",
plot.caption = element_text(color = "grey70", size = 13))
markdown::rpubsUpload("Plebiscito 04/09/2022",
"PlebiscitoConstitutional.html",
"https://api.rpubs.com/api/v1/document/936977/c0a23d876db147249022aa378023349b")
library(rjson)
library(readr)
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
library(forcats)
library(lubridate)
library(glue)
library(purrr)
library(stringr)
library(stringi)
library(tictoc)
lista_paises <- fromJSON(file = "https://www.servelelecciones.cl/data/elecciones_constitucion/filters/paises/all.json")
lista_paises
diccionario_pais <- data.frame(cod_pais = sapply(lista_paises, "[[", 1),
pais = sapply(lista_paises, "[[", 2))
diccionario_pais
scrap_pais <- function(x){
detalle_paises <- fromJSON(file = paste0("https://servelelecciones.cl/data/elecciones_constitucion/computo/pais/",
x,
".json"))
data.frame(
cod_pais = x,
apruebo = as.numeric(str_remove_all(detalle_paises[[4]][[1]]$c, "\\.")),
rechazo = as.numeric(str_remove_all(detalle_paises[[4]][[2]]$c, "\\.")),
nulo = as.numeric(str_remove_all(detalle_paises[[5]][[2]]$c, "\\.")),
blanco = as.numeric(str_remove_all(detalle_paises[[5]][[3]]$c, "\\."))
)
}
map(diccionario_pais$cod_pais, scrap_pais) %>%
bind_rows() %>%
left_join(diccionario_pais, by = "cod_pais") %>%
rowwise() %>%
mutate(votos_validos = sum(apruebo, rechazo),
votos_totales = sum(votos_validos, nulo, blanco)#,
#participacion = vot_tot/padron
)
map(diccionario_pais$cod_pais, scrap_pais) %>%
bind_rows()
map(diccionario_pais$cod_pais, scrap_pais) %>%
bind_rows() %>%
summarise(
apruebo = sum(apruebo, na.rm = TRUE),
rechazo = sum(rechazo, na.rm = TRUE),
nulo = sum(nulo, na.rm = TRUE),
blanco = sum(blanco, na.rm = TRUE)
)
map(diccionario_pais$cod_pais, scrap_pais) %>%
bind_rows() %>%
summarise(
apruebo = sum(apruebo, na.rm = TRUE),
rechazo = sum(rechazo, na.rm = TRUE),
nulo = sum(nulo, na.rm = TRUE),
blanco = sum(blanco, na.rm = TRUE)
) %>%
mutate(votos_validos = sum(apruebo, rechazo),
votos_totales = sum(votos_validos, nulo, blanco)#,
#participacion = vot_tot/padron
)
resultados_paises
resultados_paises <- map(diccionario_pais$cod_pais, scrap_pais) %>%
bind_rows() %>%
summarise(
apruebo = sum(apruebo, na.rm = TRUE),
rechazo = sum(rechazo, na.rm = TRUE),
nulo = sum(nulo, na.rm = TRUE),
blanco = sum(blanco, na.rm = TRUE)
) %>%
mutate(votos_validos = sum(apruebo, rechazo),
votos_totales = sum(votos_validos, nulo, blanco)#,
#participacion = vot_tot/padron
)
resultados_paises %>%
pivot_longer(1:2, names_to = "tipo", values_to = "votos")
resultados_paises
resultados_paises %>%
select(1:2) %>%
pivot_longer(1:2, names_to = "tipo", values_to = "votos") %>%
mutate(tipo = case_when(
tipo == "apruebo" ~ "Apruebo",
tipo == "rechazo" ~ "Rechazo"
)) %>%
mutate(tipo = as.factor(tipo),
tipo = fct_relevel(tipo, c("Apruebo", "Rechazo")))
resultados_paises %>%
mutate(porcentaje = round((votos/sum(votos)*100), 1))
resultados_paises
resultados_paises <- resultados_paises %>%
select(1:2) %>%
pivot_longer(1:2, names_to = "tipo", values_to = "votos") %>%
mutate(tipo = case_when(
tipo == "apruebo" ~ "Apruebo",
tipo == "rechazo" ~ "Rechazo"
)) %>%
mutate(tipo = as.factor(tipo),
tipo = fct_relevel(tipo, c("Apruebo", "Rechazo")))
resultados_paises
resultados_paises %>%
mutate(porcentaje = round((votos/sum(votos)*100), 1))
resultados_paises[1, 2] <- 1500
resultados_paises[2, 2] <- 1500
resultados_paises %>%
mutate(porcentaje = round((votos/sum(votos)*100), 1))
read_rds("planillas_aux/datos_2v2021.rds")
read_rds("planillas_aux/datos_2v2021_nac.rds")
read_excel("planillas_aux/Resultados_mesa_presidencial_TRICEL_2v_2021-1.xlsx", sheet = 3)
datos_2v2021_nac <- read_rds("planillas_aux/datos_2v2021_nac.rds")
datos_2v2021_nac
datos_2v2021_total <- read_rds("planillas_aux/datos_2v2021_nac.rds")
datos_2v2021_total %>%
filter(Candidato %in% c("GABRIEL BORIC FONT", "JOSE ANTONIO KAST RIST"))
datos_2v2021_total %>%
filter(Candidato %in% c("GABRIEL BORIC FONT", "JOSE ANTONIO KAST RIST")) %>%
select(Candidato, votos = Chile) %>%
mutate(porcentaje = round((votos/sum(votos))*100, 1)) %>%
mutate(Candidato = case_when(
str_detect(Candidato, "BORIC") ~ "Boric",
TRUE ~ "Kast"
)) %>%
rename(tipo = Candidato)
datos_2v2021_ext <- datos_2v2021_total %>%
filter(Candidato %in% c("GABRIEL BORIC FONT", "JOSE ANTONIO KAST RIST")) %>%
select(Candidato, votos = Extranjero) %>%
mutate(porcentaje = round((votos/sum(votos))*100, 1)) %>%
mutate(Candidato = case_when(
str_detect(Candidato, "BORIC") ~ "Boric",
TRUE ~ "Kast"
)) %>%
rename(tipo = Candidato)
datos_2v2021_ext
datos_2v2021_total
datos_2v2021_ext <- datos_2v2021_total %>%
filter(Candidato %in% c("GABRIEL BORIC FONT", "JOSE ANTONIO KAST RIST")) %>%
select(Candidato, votos = Extranjero) %>%
mutate(porcentaje = round((votos/sum(votos))*100, 1)) %>%
mutate(Candidato = case_when(
str_detect(Candidato, "BORIC") ~ "Boric",
TRUE ~ "Kast"
)) %>%
rename(tipo = Candidato)
datos_2v2021_nac <- datos_2v2021_total %>%
filter(Candidato %in% c("GABRIEL BORIC FONT", "JOSE ANTONIO KAST RIST")) %>%
select(Candidato, votos = Chile) %>%
mutate(porcentaje = round((votos/sum(votos))*100, 1)) %>%
mutate(Candidato = case_when(
str_detect(Candidato, "BORIC") ~ "Boric",
TRUE ~ "Kast"
)) %>%
rename(tipo = Candidato)
datos_2v2021_total
source("~/GitHub/WS_PlebiscitoConstitucional/scripts/Datos2V2021.R", encoding = 'UTF-8')
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(rjson)
library(readr)
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
library(forcats)
library(lubridate)
library(glue)
library(purrr)
library(stringr)
library(stringi)
library(tictoc)
source("scripts/FuncionGrafico.R", encoding = "UTF-8")
source("scripts/Datos2V2021.R", encoding = "UTF-8")
source("scripts/DatosExtra.R", encoding = "UTF-8")
source("scripts/WS_Servel_Region_f.R", encoding = "UTF-8")
source("scripts/Graf_nacional.R", encoding = "UTF-8")
graf_nacional
resultados_paises %>%
mutate(porcentaje = round((votos/sum(votos)*100), 1))
resultados_paises %>%
mutate(porcentaje = round((votos/sum(votos)*100), 1)) %>%
bind_rows(datos_2v2021_ext)
graf_extranjero <- resultados_paises %>%
mutate(porcentaje = round((votos/sum(votos)*100), 1)) %>%
bind_rows(datos_2v2021_ext) %>%
mutate(cat = case_when(
tipo %in% c("Apruebo", "Rechazo") ~ "1",
TRUE ~ "0"
)) %>%
mutate(tipo = as.factor(tipo),
tipo = fct_relevel(tipo, c("Apruebo", "Rechazo",
"Boric", "Kast"))) %>%
ggplot(aes(x = tipo, y = porcentaje,
label = paste0(porcentaje, "% \n(",
prettyNum(votos, big.mark = "."),")"),
fill = cat)) +
geom_col() +
geom_label(nudge_y = 10, fill = NA) +
labs(x = NULL, y = NULL,
title = "Resultados parciales plebiscito nacional propuesta constitucional",
subtitle = glue('Actualizado a las {str_sub(Sys.time(), 12,16)}'),
caption = "Elaborado por Pablo Aguirre Hörmann (@PAguirreH - https://github.com/pjaguirreh)") +
mi_tema +
theme(axis.text.y.left = element_blank(),
axis.text.x = element_text(size = 15),
panel.grid.major = element_blank(),
legend.position = "none") +
scale_fill_manual(values = c("1" = "#619CFF",
"0" = "light grey")) +
ylim(c(0,100))
graf_extranjero
source("scripts/WS_Servel_Paises_f.R", encoding = "UTF-8")
source("scripts/WS_Servel_Region_f.R", encoding = "UTF-8")
source("scripts/Graf_nacional.R", encoding = "UTF-8")
graf_nacional
source("scripts/Graf_extranjero.R", encoding = "UTF-8")
graf_extranjero
resultados_nacional
resultados_nacional
resultados_paises
resultados_paises
bind_cols(resultados_paises, resultados_nacional)
bind_rows(resultados_paises, resultados_nacional)
bind_rows(resultados_paises, resultados_nacional) %>%
group_by(tipo) %>%
summarise(votos = sum(votos, na.rm = TRUE))
resultados_todo <- bind_rows(resultados_paises, resultados_nacional) %>%
group_by(tipo) %>%
summarise(votos = sum(votos, na.rm = TRUE))
resultados_todo
resultados_todo
resultados_todo
resultados_todo
resultados_todo %>%
mutate(porcentaje = round((votos/sum(votos)*100), 1))
datos_2v2021_total
resultados_todo %>%
mutate(porcentaje = round((votos/sum(votos)*100), 1)) %>%
bind_rows(datos_2v2021_total)
resultados_todo %>%
mutate(porcentaje = round((votos/sum(votos)*100), 1)) %>%
bind_rows(datos_2v2021_total) %>%
mutate(cat = case_when(
tipo %in% c("Apruebo", "Rechazo") ~ "1",
TRUE ~ "0"
)) %>%
mutate(tipo = as.factor(tipo),
tipo = fct_relevel(tipo, c("Apruebo", "Rechazo",
"Boric", "Kast"))) %>%
ggplot(aes(x = tipo, y = porcentaje,
label = paste0(porcentaje, "% \n(",
prettyNum(votos, big.mark = "."),")"),
fill = cat)) +
geom_col() +
geom_label(nudge_y = 10, fill = NA) +
labs(x = NULL, y = NULL,
title = "Resultados parciales plebiscito nacional propuesta constitucional",
subtitle = glue('Mesas en Chile. Actualizado a las {str_sub(Sys.time(), 12,16)}'),
caption = "Elaborado por Pablo Aguirre Hörmann (@PAguirreH - https://github.com/pjaguirreh)") +
mi_tema +
theme(axis.text.y.left = element_blank(),
axis.text.x = element_text(size = 15),
panel.grid.major = element_blank(),
legend.position = "none") +
scale_fill_manual(values = c("1" = "#619CFF",
"0" = "light grey")) +
ylim(c(0,100))
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(rjson)
library(readr)
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
library(forcats)
library(lubridate)
library(glue)
library(purrr)
library(stringr)
library(stringi)
library(tictoc)
source("scripts/FuncionGrafico.R", encoding = "UTF-8")
source("scripts/Datos2V2021.R", encoding = "UTF-8")
source("scripts/DatosExtra.R", encoding = "UTF-8")
source("scripts/WS_Servel_Paises_f.R", encoding = "UTF-8")
rm(list = ls())
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(rjson)
library(readr)
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
library(forcats)
library(lubridate)
library(glue)
library(purrr)
library(stringr)
library(stringi)
library(tictoc)
source("scripts/FuncionGrafico.R", encoding = "UTF-8")
source("scripts/Datos2V2021.R", encoding = "UTF-8")
rm(list = ls())
gc()
library(rjson)
library(readr)
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
library(forcats)
library(lubridate)
library(glue)
library(purrr)
library(stringr)
library(stringi)
source("scripts/FuncionGrafico.R", encoding = "UTF-8")
source("scripts/Datos2V2021.R", encoding = "UTF-8")
source("scripts/DatosExtra.R", encoding = "UTF-8")
source("scripts/ManejoDatos.R", encoding = "UTF-8")
rm(list = ls())
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(rjson)
library(readr)
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
library(forcats)
library(lubridate)
library(glue)
library(purrr)
library(stringr)
library(stringi)
source("scripts/FuncionGrafico.R", encoding = "UTF-8")
source("scripts/Datos2V2021.R", encoding = "UTF-8")
source("scripts/DatosExtra.R", encoding = "UTF-8")
source("scripts/WS_Servel_Paises_f.R", encoding = "UTF-8")
source("scripts/WS_Servel_Region_f.R", encoding = "UTF-8")
source("scripts/WS_Servel_Comuna_f.R", encoding = "UTF-8")
source("scripts/ManejoDatos.R", encoding = "UTF-8")
source("scripts/Graf_total.R", encoding = "UTF-8")
graf_total
source("scripts/Graf_nacional.R", encoding = "UTF-8")
graf_nacional
source("scripts/Graf_extranjero.R", encoding = "UTF-8")
graf_extranjero
source("scripts/Graf_regiones.R")
graf_regional
source("scripts/Graf_total.R", encoding = "UTF-8")
graf_total
source("scripts/Graf_comunales.R", encoding = "UTF-8")
graf_comunal
graf_comunal2
votos_validos_com
rmarkdown::render("PlebiscitoConstitutional.Rmd",
output_file = "PlebiscitoConstitucional.html")
markdown::rpubsUpload("Plebiscito 04/09/2022",
"PlebiscitoConstitutional.html",
"https://api.rpubs.com/api/v1/document/936977/c0a23d876db147249022aa378023349b")
markdown::rpubsUpload("Plebiscito 04/09/2022",
"PlebiscitoConstitutional.html",
"https://api.rpubs.com/api/v1/document/936977/c0a23d876db147249022aa378023349b")
